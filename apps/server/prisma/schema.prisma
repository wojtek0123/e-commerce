// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]
}

model ProductInventory {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book[]
}

model Book {
  id                 Int              @id @default(autoincrement())
  title              String
  description        String?
  language           String?
  pages              Int?
  publishedDate      DateTime?
  price              Float
  coverImage         String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  publisher          Publisher?       @relation(fields: [publisherId], references: [id])
  publisherId        Int?
  authors            BookAuthor[]
  category           Category         @relation(fields: [categoryId], references: [id])
  categoryId         Int
  tag                Tag?
  cartItem           CartItem[]
  productInventory   ProductInventory @relation(fields: [productInventoryId], references: [id])
  productInventoryId Int
  orderItem          OrderItem?
}

model BookAuthor {
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId     Int
  author     Author   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId   Int
  createdAt  DateTime @default(now())
  updatedAat DateTime @updatedAt

  @@id([bookId, authorId])
}

model Author {
  id    Int          @id @default(autoincrement())
  name  String
  books BookAuthor[]
}

model Publisher {
  id    Int    @id @default(autoincrement())
  name  String
  books Book[]
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  password        String
  refreshToken    String?
  role            Role              @default(USER)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  address         UserAddress?
  shoppingSession ShoppingSession[]
}

model UserAddress {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String
  phone        String
  city         String
  postcode     String
  street       String
  houseNumber  String
  homeNumber   String
  user         User          @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId       Int           @unique
  orderDetails OrderDetails?
}

model ShoppingSession {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  total     Float
  cartItem  CartItem[]

  @@unique([userId])
}

model CartItem {
  id                Int             @id @default(autoincrement())
  quantity          Int
  book              Book            @relation(fields: [bookId], references: [id])
  bookId            Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  shoppingSession   ShoppingSession @relation(fields: [shoppingSessionId], references: [id], onUpdate: Cascade)
  shoppingSessionId Int             @unique
}

model OrderDetails {
  id               Int            @id @default(autoincrement())
  total            Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  paymentDetails   PaymentDetails @relation(fields: [paymentDetailsId], references: [id], onUpdate: Cascade)
  paymentDetailsId Int            @unique
  orderItem        OrderItem[]
  userAddress      UserAddress    @relation(fields: [userAddressId], references: [id], onUpdate: Cascade)
  userAddressId    Int            @unique
}

model OrderItem {
  id             Int          @id @default(autoincrement())
  book           Book         @relation(fields: [bookId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  bookId         Int          @unique
  orderDetails   OrderDetails @relation(fields: [orderDetailsId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderDetailsId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([orderDetailsId])
}

model PaymentDetails {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  amount       Int
  provider     String
  status       PaymentStatus
  orderDetails OrderDetails?
}

enum Role {
  ADMIN
  USER
}

enum Tag {
  NEW
  BESTSELLER
  INCOMING
  DISCOUNT
}

enum PaymentStatus {
  PROCESSING
  SUCCEEDED
  FAILED
}
