// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/nestjs-dto"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "false"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  outputType                      = "class"
  prettier                        = "true"
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Decimal
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // productCategory    ProductCategory?  @relation(fields: [productCategoryId], references: [id])
  // productCategoryId  Int
  // productInventory   ProductInventory? @relation(fields: [productInventoryId], references: [id])
  // productInventoryId Int               @unique
  // discount           Discount?         @relation(fields: [discountId], references: [id])
  // discountId         Int
  // cartItem           CartItem?
  // orderItems         OrderItems?

  @@map("product")
}

model User {
  id          String        @id @default(uuid())
  firstName   String
  surname     String
  email       String        @unique
  password    String
  role        Role          @default(USER)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userDetails UserAddress[]
  // shoppingSession ShoppingSession?
  // OrderDetails    OrderDetails[]
  // UserPayment     UserPayment[]

  @@map("user")
}

model UserAddress {
  id          String @id @default(uuid())
  phone       String
  city        String
  street      String
  houseNumber String
  homeNumber  String
  user        User   @relation(fields: [userId], references: [id])
  userId      String

  @@map("user_address")
}

// model ProductCategory {
//   id          Int      @id @default(autoincrement())
//   name        String
//   description String
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   product     Product[]

//   @@map("product_category")
// }

// model ProductInventory {
//   id        Int      @id @default(autoincrement())
//   quantity  Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   product   Product?

//   @@map("product_inventory")
// }

// model Discount {
//   id              Int      @id @default(autoincrement())
//   name            String
//   description     String
//   discountPercent Decimal
//   active          Boolean
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt
//   Product         Product[]

//   @@map("discount")

// }
// model ShoppingSession {
//   id        Int        @id @default(autoincrement())
//   total     Decimal
//   createdAt DateTime   @default(now())
//   user      User       @relation(fields: [userId], references: [id])
//   userId    String     @unique
//   CartItem  CartItem[]

//   @@map("shopping_session")
// }

// model CartItem {
//   id                Int              @id @default(autoincrement())
//   quantity          Int
//   createdAt         DateTime         @default(now())
//   updatedAt         DateTime         @updatedAt
//   shoppingSession   ShoppingSession? @relation(fields: [shoppingSessionId], references: [id])
//   shoppingSessionId Int?
//   product           Product?         @relation(fields: [productId], references: [id])
//   productId         Int?             @unique

//   @@map("cart_item")
// }

// model OrderDetails {
//   id               Int             @id @default(autoincrement())
//   total            Decimal
//   createdAt        DateTime        @default(now())
//   updatedAt        DateTime        @updatedAt
//   user             User?           @relation(fields: [userId], references: [id])
//   userId           String?
//   paymentDetails   PaymentDetails? @relation(fields: [paymentDetailsId], references: [id])
//   paymentDetailsId Int?            @unique
//   OrderItems       OrderItems[]

//   @@map("order_details")
// }

// model PaymentDetails {
//   id           Int           @id @default(autoincrement())
//   amount       Int
//   provider     String
//   status       String
//   createdAt    DateTime      @default(now())
//   updatedAt    DateTime      @updatedAt
//   OrderDetails OrderDetails?

//   @@map("payment_details")
// }

// model OrderItems {
//   id        Int          @id @default(autoincrement())
//   quantity  Int
//   createdAt DateTime     @default(now())
//   updatedAt DateTime     @updatedAt
//   order     OrderDetails @relation(fields: [orderId], references: [id])
//   orderId   Int
//   product   Product      @relation(fields: [productId], references: [id])
//   productId Int          @unique

//   @@map("order_items")
// }

// model UserPayment {
//   id            Int      @id @default(autoincrement())
//   paymentType   String
//   provider      String
//   accountNumber String
//   expiry        DateTime
//   user          User     @relation(fields: [userId], references: [id])
//   userId        String

//   @@map("user_payment")
// }

enum Role {
  ADMIN
  USER
  ROOT
}
