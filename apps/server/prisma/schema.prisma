// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator nestjsDto {
//   provider                        = "prisma-generator-nestjs-dto"
//   output                          = "../src/generated/nestjs-dto"
//   outputToNestJsResourceStructure = "false"
//   flatResourceStructure           = "false"
//   exportRelationModifierClasses   = "true"
//   reExport                        = "false"
//   createDtoPrefix                 = "Create"
//   updateDtoPrefix                 = "Update"
//   dtoSuffix                       = "Dto"
//   entityPrefix                    = ""
//   entitySuffix                    = ""
//   classValidation                 = "false"
//   fileNamingStyle                 = "camel"
//   noDependencies                  = "false"
//   outputType                      = "class"
//   prettier                        = "true"
// }

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]

  @@map("category")
}

model Book {
  id            Int          @id @default(autoincrement())
  title         String
  description   String?
  language      String?
  pages         Int?
  publishedDate DateTime?
  price         Float
  coverImage    String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  publisher     Publisher?   @relation(fields: [publisherId], references: [id])
  publisherId   Int?
  authors       BookAuthor[]
  category      Category     @relation(fields: [categoryId], references: [id])
  categoryId    Int
  tag           Tag?
  CartItem      CartItem[]

  @@map("book")
}

model BookAuthor {
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId     Int
  author     Author   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId   Int
  createdAt  DateTime @default(now())
  updatedAat DateTime @updatedAt

  @@id([bookId, authorId])
  @@map("book_author")
}

model Author {
  id    Int          @id @default(autoincrement())
  name  String
  books BookAuthor[]

  @@map("author")
}

model Publisher {
  id    Int    @id @default(autoincrement())
  name  String
  books Book[]

  @@map("publisher")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  refreshToken String?
  role         Role          @default(USER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userDetails  UserAddress[]
  CartItem     CartItem[]

  @@map("user")
}

model UserAddress {
  id          Int    @id @default(autoincrement())
  firstName   String
  surname     String
  phone       String
  city        String
  street      String
  houseNumber String
  homeNumber  String
  user        User   @relation(fields: [userId], references: [id])
  userId      Int

  @@map("user_address")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_item")
}

enum Role {
  ADMIN
  USER
}

enum Tag {
  NEW
  BESTSELLER
  INCOMING
  DISCOUNT
}
