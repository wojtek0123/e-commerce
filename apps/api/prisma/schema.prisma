// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]
}

model ProductInventory {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book?
}

model BookReview {
  id        String   @id @default(uuid())
  rating    Int
  message   String?
  name      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  book      Book     @relation(fields: [bookId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  bookId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id                 String               @id @default(uuid())
  title              String
  description        String?
  language           String?
  pages              Int?
  publishedDate      DateTime?
  price              Float
  coverImage         String?              @default("https://wialcudrcfkznrlcooal.supabase.co/storage/v1/object/sign/image-covers/not-found.png?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJpbWFnZS1jb3ZlcnMvbm90LWZvdW5kLnBuZyIsImlhdCI6MTczNDk2OTQzOCwiZXhwIjo0ODg4NTY5NDM4fQ.vJne2LtJc42hsss3q_TF3ey-8KoXKnzYvZIFq_CaXB8&t=2024-12-23T15%3A57%3A18.203Z")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  publisher          Publisher?           @relation(fields: [publisherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  publisherId        String?
  authors            BookAuthor[]
  category           Category             @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId         String
  tag                Tag?
  cartItems          CartItem[]
  productInventory   ProductInventory     @relation(fields: [productInventoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productInventoryId String               @unique
  orderItem          OrderItem[]
  favouriteBooksList FavouriteBooksList[]
  reviews            BookReview[]
}

model BookAuthor {
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId    String
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([bookId, authorId])
}

model Author {
  id    String       @id @default(uuid())
  name  String
  books BookAuthor[]
}

model Publisher {
  id    String @id @default(uuid())
  name  String
  books Book[]
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  password           String
  refreshToken       String?
  role               Role                @default(USER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  address            UserAddress[]
  creditCard         CreditCard?
  shoppingSessions   ShoppingSession?
  orderDetails       OrderDetails[]
  favouriteBooksList FavouriteBooksList?
  bookReviews        BookReview[]
}

model FavouriteBooksList {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CreditCard {
  id             String   @id @default(uuid())
  number         String
  securityCode   String
  expirationDate String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId         String   @unique
}

model UserAddress {
  id          String  @id @default(uuid())
  firstName   String
  lastName    String
  phone       String
  city        String
  postcode    String
  street      String
  houseNumber String?
  homeNumber  String
  country     Country @relation(fields: [countryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  countryId   String
  user        User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId      String
}

model Country {
  id           String         @id @default(uuid())
  code         String
  name         String
  userAddress  UserAddress[]
  orderAddress OrderAddress[]
}

model ShoppingSession {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String     @unique
  total     Float
  cartItems CartItem[]
}

model CartItem {
  id                String          @id @default(uuid())
  quantity          Int
  book              Book            @relation(fields: [bookId], references: [id])
  bookId            String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  shoppingSession   ShoppingSession @relation(fields: [shoppingSessionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  shoppingSessionId String

  @@unique([bookId, shoppingSessionId])
}

model OrderDetails {
  id               String         @id @default(uuid())
  total            Float
  status           OrderStatus    @default(NEW)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  paymentDetails   PaymentDetails @relation(fields: [paymentDetailsId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  paymentDetailsId String         @unique
  orderItems       OrderItem[]
  shippingMethod   ShippingMethod @relation(fields: [shippingMethodId], references: [id])
  shippingMethodId String
  user             User           @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId           String
  orderAddress     OrderAddress   @relation(fields: [orderAddressId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderAddressId   String         @unique
}

model OrderAddress {
  id           String        @id @default(uuid())
  firstName    String
  lastName     String
  phone        String
  city         String
  postcode     String
  street       String
  houseNumber  String?
  homeNumber   String
  country      Country       @relation(fields: [countryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  countryId    String
  orderDetails OrderDetails?
}

model OrderItem {
  id             String       @id @default(uuid())
  book           Book         @relation(fields: [bookId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  bookId         String
  quantity       Int
  orderDetails   OrderDetails @relation(fields: [orderDetailsId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderDetailsId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model PaymentDetails {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  amount       Float
  method       PaymentMethod
  status       PaymentStatus
  orderDetails OrderDetails?
}

model ShippingMethod {
  id           String         @id @default(uuid())
  name         String
  price        Float
  deliveryTime String
  orderDetails OrderDetails[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum Tag {
  NEW
  BESTSELLER
  INCOMING
  DISCOUNT
  PREMIERE_OF_THE_MONTH
}

enum OrderStatus {
  NEW
  PACKING
  PREPARED_FOR_SHIPPING
  SHIPPED
}

enum PaymentStatus {
  PROCESSING
  SUCCEEDED
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  SIX_DIGIT_CODE
}
