// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]
}

model ProductInventory {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book?
}

model Book {
  id                 Int              @id @default(autoincrement())
  title              String
  description        String?
  language           String?
  pages              Int?
  publishedDate      DateTime?
  price              Float
  coverImage         String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  publisher          Publisher?       @relation(fields: [publisherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  publisherId        Int?
  authors            BookAuthor[]
  category           Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId         Int
  tag                Tag?
  cartItems          CartItem[]
  productInventory   ProductInventory @relation(fields: [productInventoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productInventoryId Int              @unique
  orderItem          OrderItem[]
}

model BookAuthor {
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId    Int
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([bookId, authorId])
}

model Author {
  id    Int          @id @default(autoincrement())
  name  String
  books BookAuthor[]
}

model Publisher {
  id    Int    @id @default(autoincrement())
  name  String
  books Book[]
}

model User {
  id               Int              @id @default(autoincrement())
  email            String           @unique
  password         String
  refreshToken     String?
  role             Role             @default(USER)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  address          UserAddress?
  creditCard       CreditCard?
  shoppingSessions ShoppingSession?
  orderDetails     OrderDetails[]
}

model CreditCard {
  id             Int      @id @default(autoincrement())
  number         String
  securityCode   String
  expirationDate String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId         Int      @unique
}

model UserAddress {
  id           Int            @id @default(autoincrement())
  firstName    String
  lastName     String
  phone        String
  city         String
  postcode     String
  street       String
  houseNumber  String
  homeNumber   String
  country      Country        @relation(fields: [countryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  countryId    Int            @unique
  user         User           @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId       Int            @unique
  orderDetails OrderDetails[]
}

model Country {
  id          Int          @id @default(autoincrement())
  code        String
  name        String
  userAddress UserAddress?
}

model ShoppingSession {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int        @unique
  total     Float
  cartItems CartItem[]
}

model CartItem {
  id                Int             @id @default(autoincrement())
  quantity          Int
  book              Book            @relation(fields: [bookId], references: [id])
  bookId            Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  shoppingSession   ShoppingSession @relation(fields: [shoppingSessionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  shoppingSessionId Int

  @@unique([bookId, shoppingSessionId])
}

model OrderDetails {
  id               Int            @id @default(autoincrement())
  total            Float
  status           OrderStatus    @default(NEW)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  paymentDetails   PaymentDetails @relation(fields: [paymentDetailsId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  paymentDetailsId Int            @unique
  orderItems       OrderItem[]
  userAddress      UserAddress    @relation(fields: [userAddressId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userAddressId    Int
  shippingMethod   ShippingMethod @relation(fields: [shippingMethodId], references: [id])
  shippingMethodId Int
  user             User           @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId           Int
}

model OrderItem {
  id             Int          @id @default(autoincrement())
  book           Book         @relation(fields: [bookId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  bookId         Int
  quantity       Int
  orderDetails   OrderDetails @relation(fields: [orderDetailsId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderDetailsId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model PaymentDetails {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  amount       Float
  provider     String
  status       PaymentStatus
  orderDetails OrderDetails?
}

model ShippingMethod {
  id           Int            @id @default(autoincrement())
  name         String
  price        Float
  // deliveryTime String
  orderDetails OrderDetails[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum Tag {
  NEW
  BESTSELLER
  INCOMING
  DISCOUNT
  PREMIERE_OF_THE_MONTH
}

enum OrderStatus {
  NEW
  PROCESSING
  SHIPPED
  COMPLETED
}

enum PaymentStatus {
  PROCESSING
  SUCCEEDED
  FAILED
}
