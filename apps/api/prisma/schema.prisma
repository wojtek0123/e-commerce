generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]
}

model Inventory {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookId    String   @unique // Ensure bookId is unique
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model BookReview {
  id        String   @id @default(uuid())
  rating    Int
  message   String?
  userId    String
  bookId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Book {
  id                 String               @id @default(uuid())
  title              String
  description        String?
  language           String?
  pages              Int?
  publishedDate      DateTime?
  price              Float
  coverImage         String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  publisherId        String?
  categoryId         String
  tag                Tag?
  category           Category             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  inventory          Inventory?
  publisher          Publisher?           @relation(fields: [publisherId], references: [id], onDelete: Cascade)
  authors            BookAuthor[]
  reviews            BookReview[]
  cartItems          CartItem[]
  orderItem          OrderItem[]
  favouriteBooksList FavouriteBooksList[] @relation("BookToFavouriteBooksList")
}

model BookAuthor {
  bookId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@id([bookId, authorId])
}

model Author {
  id    String       @id @default(uuid())
  name  String
  books BookAuthor[]
}

model Publisher {
  id    String @id @default(uuid())
  name  String
  books Book[]
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  password           String
  refreshToken       String?
  role               Role                @default(USER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  bookReviews        BookReview[]
  creditCard         CreditCard?
  favouriteBooksList FavouriteBooksList?
  orderDetails       OrderDetails[]
  shoppingSessions   ShoppingSession?
  address            UserAddress[]
  userInformation    UserInformation?
}

model UserInformation {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserAddress {
  id          String  @id @default(uuid())
  city        String
  postcode    String
  street      String
  houseNumber String?
  homeNumber  String
  userId      String
  countryId   String
  country     Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FavouriteBooksList {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  books     Book[]   @relation("BookToFavouriteBooksList")
}

model CreditCard {
  id             String   @id @default(uuid())
  number         String
  securityCode   String
  expirationDate String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Country {
  id           String         @id @default(uuid())
  code         String
  name         String
  orderAddress OrderAddress[]
  userAddress  UserAddress[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model ShoppingSession {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  total     Float
  cartItems CartItem[]
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id                String          @id @default(uuid())
  quantity          Int
  bookId            String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  shoppingSessionId String
  book              Book            @relation(fields: [bookId], references: [id])
  shoppingSession   ShoppingSession @relation(fields: [shoppingSessionId], references: [id], onDelete: Cascade)

  @@unique([bookId, shoppingSessionId])
}

model OrderDetails {
  id                     String               @id @default(uuid())
  total                  Float
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  userId                 String
  status                 OrderStatus          @default(NEW)
  orderAddressId         String               @unique
  orderAddress           OrderAddress         @relation(fields: [orderAddressId], references: [id], onDelete: Cascade)
  orderUserInformationId String               @unique
  orderUserInformation   OrderUserInformation @relation(fields: [orderUserInformationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderShippingMethodId  String               @unique
  orderShippingMethod    OrderShippingMethod  @relation(fields: [orderShippingMethodId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentDetailsId       String               @unique
  paymentDetails         PaymentDetails       @relation(fields: [paymentDetailsId], references: [id], onDelete: Cascade)
  user                   User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems             OrderItem[]
}

model OrderShippingMethod {
  id           String        @id @default(uuid())
  name         String
  price        Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orderDetails OrderDetails?
}

model OrderUserInformation {
  id           String        @id @default(uuid())
  firstName    String
  lastName     String
  phone        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orderDetails OrderDetails?
}

model OrderAddress {
  id           String        @id @default(uuid())
  city         String
  postcode     String
  street       String
  houseNumber  String?
  homeNumber   String
  countryId    String
  country      Country       @relation(fields: [countryId], references: [id], onDelete: Cascade)
  orderDetails OrderDetails?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id             String       @id @default(uuid())
  bookId         String
  orderDetailsId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  quantity       Int
  book           Book         @relation(fields: [bookId], references: [id], onDelete: Cascade)
  orderDetails   OrderDetails @relation(fields: [orderDetailsId], references: [id], onDelete: Cascade)
}

model PaymentDetails {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  amount       Float
  status       PaymentStatus
  method       PaymentMethod
  orderDetails OrderDetails?
}

model ShippingMethod {
  id           String         @id @default(uuid())
  name         String
  price        Float
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deliveryTime String
}

enum Role {
  ADMIN
  USER
}

enum Tag {
  NEW
  BESTSELLER
  INCOMING
  DISCOUNT
  PREMIERE_OF_THE_MONTH
}

enum OrderStatus {
  NEW
  PACKING
  PREPARED_FOR_SHIPPING
  SHIPPED
}

enum PaymentStatus {
  PROCESSING
  SUCCEEDED
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  SIX_DIGIT_CODE
}
